@model App472.WebUI.Models.CartIndexViewModel
@{
    ViewBag.Title = "Your Cart";
}
<style>
    #cartTable td {
        vertical-align: middle;
    }
</style>
<h2>Your Cart</h2>

<div class="table-responsive-xl mgCartTableStyle">
    <table id="cartTable" class="table" style="margin-bottom:10px;">
        <thead>
            <tr>
                <th>
                    <span class="d-block d-sm-block d-md-none">Qty</span>
                    <span class="d-none  d-sm-none  d-md-block">Quantity</span>
                </th>
                <th>Item</th>
                <th class="text-right">Price</th>
                <th class="text-right">Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var line in Model.Cart.Lines)
            {
                <tr>
                    <td class="text-center">@line.Quantity</td>
                    <td class="text-left">@line.InStockProduct.Name</td>
                    <td class="text-right">@line.InStockProduct.Price.ToString("c")</td>
                    <td class="text-right">@((line.Quantity * line.InStockProduct.Price).ToString("c"))</td>
                    <td>
                        @using (Html.BeginForm("RemoveFromCart", "Cart"))
                        {
                            var myId = line.InStockProduct.ID + "_ReturnUrl"; // eg "2_ReturnUrl"
                            var retUrl = Model.ReturnUrl; // already coming through as "/Water%20Sports" ...this prints as "/Water%20Sports"

                            // Here because ID is already an int, its safe to print line.InStockProduct.ID straight to page.
                            @Html.Hidden("inStockProductId", line.InStockProduct.ID, new{})

                            // Here if we pass retUrl="/Water Sports" ...The framework will print it to the page as "/Water%20Sports"
                            @Html.Hidden("ReturnUrl", retUrl, new{id=myId })

                            <input class="btn btn-sm btn-warning mg-warning" type="submit" value="Remove" />
                        }
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td></td>
                <td></td>
                <td class="text-right">Total:</td>
                <td class="text-right">
                    @Model.Cart.ComputeTotalValue().ToString("c")
                </td>
                <td></td>
            </tr>
        </tfoot>
    </table>
</div>
@{
    // If we navigate from the checkout shipping page, BACK to the cart index page... then we want `back to shopping` button to take us to "/" (the shopping index page)
    // The `continue shopping` button should NOT take us forward in the checkout process.
    string desiredReturnUrl = Model.ReturnUrl;
    string referrer = Request.UrlReferrer.AbsolutePath ?? ""; // eg / | /Chess | /Soccer | /Water%20Sports | /Cart/Checkout

    // If we navigated from Checkout to Cart/Index, then Back to Shopping should take us to /
    // If we navigated from Shopping to Cart/Index, then Back to Shopping should take us to Referrer
    string backLink;
    if (referrer == "/Cart/Checkout" || string.IsNullOrEmpty(desiredReturnUrl)) // if we came here from the checkout, or there is no return url argument
    {
        backLink = "/"; // back to shopping - take us to root
    }
    else
    {
        backLink = desiredReturnUrl; // back to shopping - take us to the given return url. Eg /Soccer
    }
    var a = 1;
}
<div class="text-center" style="margin-bottom:0px; padding-top:6px;">
    <a class="btn btn-primary" href="@backLink" style="min-width:185px; margin-bottom: 6px; "><i class="bi bi-arrow-left-circle"></i> Continue Shopping</a>
    <a class="btn btn-primary" style="min-width:185px; margin-bottom: 6px;" href="@Url.Action("Checkout", "Cart", new { returnUrl = Request.Path })"><i class="bi bi-cart-fill"></i> Checkout now</a>
</div>